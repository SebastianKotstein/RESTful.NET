using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace skotstein.net.http.oauth
{
    public interface IClientAccountStorage
    {
        /// <summary>
        /// Returns a list containing all <see cref="IClientAccount"/> entities.
        /// </summary>
        /// <returns>list with all <see cref="IClientAccount"/>s</returns>
        IList<IClientAccount> GetAllClients();

        /// <summary>
        /// Returns the <see cref="IClientAccount"/> matching the passed ID or null, if there is no <see cref="IClientAccount"/> having the passed ID.
        /// </summary>
        /// <param name="clientId">client ID</param>
        /// <returns>the <see cref="IClientAccount"/> matching the passed ID</returns>
        IClientAccount GetClient(string clientId);

        /// <summary>
        /// Returns true if there is a <see cref="IClientAccount"/> having the passed ID, else false.
        /// </summary>
        /// <param name="clientId">client ID</param>
        /// <returns>true or false</returns>
        bool HasClient(string clientId);

        /// <summary>
        /// Creates and stores a new <see cref="IClientAccount"/> entity. The <see cref="IClientAccount.ClientId"/> is generated by this method and is returned (an manually set <see cref="IClientAccount.ClientId"/> in data will be overwritten).
        /// This method throws an <see cref="Exception"/> if the passed data is not set.
        /// </summary>
        /// <param name="data">new data of the <see cref="IClientAccount"/></param>
        /// <returns>the generated ID for the client</returns>
        string CreateClient(IClientAccount data);

        /// <summary>
        /// Updates the data of the <see cref="IClientAccount"/> having the specified ID. The method throws an <see cref="Exception"/> if there is no <see cref="IClientAccount"/>
        /// matching the passed ID or if the client ID or the passed data is not set.
        /// </summary>
        /// <param name="clientId">client ID</param>
        /// <param name="data">updated data of the <see cref="IClientAccount"/></param>
        void UpdateClient(string clientId, IClientAccount data);

        /// <summary>
        /// Deletes the <see cref="IClientAccount"/> having the specified ID. Nothing will happen, if there is no <see cref="IClientAccount"/> matching the passed client ID.
        /// The method throws an <see cref="Exception"/> if the client ID is not set.
        /// </summary>
        /// <param name="clientId">client ID of the <see cref="IClientAccount"/> which should be deleted</param>
        void DeleteClient(string clientId);
        


    }
}
