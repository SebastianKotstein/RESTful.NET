using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace skotstein.net.http.oauth
{
    public interface IUserAccountStorage
    {
        /// <summary>
        /// Returns a list containing all <see cref="IUserAccount"/> entities.
        /// </summary>
        /// <returns>list with all <see cref="IUserAccount"/>s</returns>
        IList<IUserAccount> GetAllUsers();

        /// <summary>
        /// Returns the <see cref="IUserAccount"/> matching the passed ID or null, if there is no <see cref="IUserAccount"/> having the passed ID.
        /// </summary>
        /// <param name="userId">user ID</param>
        /// <returns>the <see cref="IUserAccount"/> matching the passed ID</returns>
        IUserAccount GetUserById(string userId);

        /// <summary>
        /// Returns the <see cref="IUserAccount"/> matching the passed username or null, if there is no <see cref="IUserAccount"/> having the passed username.
        /// </summary>
        /// <param name="username">username</param>
        /// <returns>the <see cref="IUserAccount"/> matching the passed username</returns>
        IUserAccount GetUserByName(string username);

        /// <summary>
        /// Returns true if there is a <see cref="IUserAccount"/> having the passed ID, else false.
        /// </summary>
        /// <param name="userId">user ID</param>
        /// <returns>true or false</returns>
        bool HasUser(string userId);

        /// <summary>
        /// Creates and stores a new <see cref="IUserAccount"/> entity. The <see cref="IUserAccount.UserId"/> is generated by this method and is returned (an manually set <see cref="IUserAccount.UserId"/> in
        /// data will be overwritten). Note that the passed username in data must be unique. This methods throws an <see cref="Exception"/>
        /// if there is already a <see cref="IUserAccount"/> having the passed username, or if the the username or the data is not set.
        /// </summary>
        /// <param name="data">new data of the <see cref="IUserAccount"/></param>
        /// <returns>the generated ID for the user</returns>
        string CreateUser(IUserAccount data);

        /// <summary>
        /// Updates the data of the <see cref="IUserAccount"/> having the specified ID. Note that the username cannot be changed. The method throws an <see cref="Exception"/> if there is no <see cref="IUserAccount"/>
        /// matching the passed ID or if the user ID or the passed data is not set.
        /// </summary>
        /// <param name="userId">user ID</param>
        /// <param name="data">updated of the <see cref="IUserAccount"/></param>
        void UpdateUser(string userId, IUserAccount data);

        /// <summary>
        /// Deletes the <see cref="IUserAccount"/> having the specified ID. Nothing will happen, if there is no <see cref="IUserAccount"/> matching the passed ID.
        /// The method throws an <see cref="Exception"/> if the user ID is not set.
        /// </summary>
        /// <param name="userId">user ID of the <see cref="IUserAccount"/> which should be deleted</param>
        void DeleteUser(string userId);

        
    }
}
